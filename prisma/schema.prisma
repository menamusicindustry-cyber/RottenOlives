// prisma/schema.prisma

enum ReleaseType {
  SINGLE
  EP
  ALBUM
  COMPILATION
  UNKNOWN
}

model Artist {
  id      String  @id        // we’ll store Spotify artist ID here
  name    String
  country String?
  releases Release[]
}

model Genre {
  id   Int     @id @default(autoincrement())
  name String  @unique
  releases ReleaseGenre[]
}

model Release {
  id              String   @id @default(cuid())
  artistId        String
  title           String
  type            ReleaseType
  releaseDate     DateTime?
  label           String?
  coverUrl        String?
  isMena          Boolean  @default(false)
  spotifyTrackId  String?  @unique  // ← IMPORTANT for upsert
  artist          Artist   @relation(fields: [artistId], references: [id])
  genres          ReleaseGenre[]
  ratings         AudienceRating[]
  score           ReleaseScore?

  @@unique([artistId, title]) // keep this — we’ll fall back to it when needed
}

model ReleaseGenre {
  releaseId String
  genreId   Int
  release   Release @relation(fields: [releaseId], references: [id])
  genre     Genre   @relation(fields: [genreId], references: [id])

  @@id([releaseId, genreId]) // or @@unique([releaseId, genreId])
}

model AudienceRating {
  id         String   @id @default(cuid())
  releaseId  String
  userId     String
  stars      Int
  comment    String?
  createdAt  DateTime @default(now())
  ipHash     String?
  subnetHash String?
  ipVersion  Int?
  release    Release  @relation(fields: [releaseId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model ReleaseScore {
  releaseId      String  @id
  audienceScore  Float?
  audienceCount  Int     @default(0)
  lastCalculated DateTime @default(now())
  release        Release @relation(fields: [releaseId], references: [id])
}

model User {
  id        String   @id @default(cuid())
  email     String
  name      String?
  createdAt DateTime  @default(now())
  ratings   AudienceRating[]
}
